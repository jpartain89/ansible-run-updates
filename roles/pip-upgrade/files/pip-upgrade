#!/usr/bin/env bash
# shellcheck disable=SC2086
# shellcheck disable=SC2068
set -e

# This script attempts to `find` all of the installed pip executables
# that are installed in `/usr/local/bin` and `/usr/bin` using `find`
#
# Then, it runs `freeze` to get a list of all installed pip apps
# And then runs `install --upgrade` on the list

# Copyright Â© 2017-2019 JPCDI, JPartain89 and Justin Partain
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Program Info
PROGRAM_NAME="pip-upgrade"
VERSION="2.0.0"

# Setting any command line flags, such as -l or --list
if [[ $# -ge 1 ]]; then FLAG="${1}"; fi

# This is to fix dialog's output on macOS
export NCURSES_NO_UTF8_ACS=1

# Sets the system path to using spaces instead of colons
space_PATH="$(echo $PATH | tr : " " )"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

command -v "${PROGRAM_NAME}" 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
            sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
            sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
        else
            echo "For some reason, linking ${PROGRAM_NAME} to /usr/local/bin,"
            echo "failed. My apologies for not being able to figure it out..."
            exit 1
        fi
    )
}

function usage() {
cat << EOF
Usage: pip-upgrade [option]

    Running this command without any flags will run

        sudo -H [pip | pip2 | pip3 | etc ] install -U $(installed apps)

    It goes through and tries to find all of the installed "pip" commands across the system using your ${PATH} variable.

    It then runs one of those "pips --list", and then runs "pip update" against that list.

        -l | --list     This will make this script not run the upgrade, but
                        output the installed apps.
EOF
}

# This creates the blank array
pipArray=()

# This tries to find all of the installed `pip` commands using the system $PATH
# cycling through each found instance of `pip`, no matter the version.
## The find line is specifically set this way to make bash happy
while IFS= read -r line; do
    pipArray+=("${line}")
done < <(sudo find ${space_PATH} \( -iname 'pip' -o -iname 'pip[0-9]' -o -iname 'pip[0-9].[0-9]' \) -exec sh -c 'echo "$@"' {} + )

function exitBlock() {
    unset pipArray apps i
    exit $?
}

trap 'exitBlock' EXIT HUP INT QUIT TERM

# This takes the above while loop and operates on each found pip version
# DO NOT QUOTE the pipArray variable here! This will stop the splitting apart
# of the array!! GAH
for PIP_ARRAY in ${pipArray[@]}; do
    # This sets the apps array variable to empty
    apps=()
    echo $PIP_ARRAY

    # This uses each of the found pip versions, and lists out the packages
    # installed with each one, saving it to the `apps` variable
    while IFS= read -r line2; do
        apps+=("${line2}")
    done < <("${PIP_ARRAY}" list --format=columns | awk 'NR>2 { print $1 }')

    # Setting pip to be deleted as upgrading pip separate from homebrew
    # on macOS borks pip
    delete=(pip)
    for target in "${delete[@]}"; do
        for i in "${!apps[@]}"; do
            if [[ ${array[i]} == $target ]]; then
                unset 'array[i]'
            fi
        done
    done

    sudo -H "${PIP_ARRAY}" install -U ${apps[*]}
    unset apps

    if [[ -n "${PIP_ARRAY}" ]]; then
        echo ""
    fi
done
